﻿@using SurfsUpv3.Models;
@model Booking


<div class="container">
    <h3>Booking Oversigt</h3>
    
    <br/>

    <p>Du har valgt at leje : @Model.SelectedSurfboard</p>
    <p>For at fuldføre din ordre bedes du taste dine informationer:</p>


    <form method="post" asp-controller="BookingConfirmation" asp-action="ValidationTest">

        <div class="text-danger" asp-validation-summary="None"></div> <!-- If we use asp-validation-summary="All", ALL our error messages are summarized here -->

        <!-- We need this so we don't lose the SelectedSurfboard if we come back here due to mistakenly not having filled all fields -->
        <input type="hidden" asp-for="SelectedSurfboard" />

        <!-- Name -->
        <div class="form-group">
            <label asp-for="CustomerName">Fuldt Navn</label>
            <input type="text" asp-for="CustomerName" class="form-control" id="rentOrderFullName" placeholder="Indtast navn"/>

            <!-- This is an additional error indicator, that'll show "This X field is required" -->
            <div class="col">
                <span  class="text-danger" asp-validation-for="CustomerName"></span>
            </div>
        </div>

        <!-- E-mail -->
        <div class="form-group">
            <label asp-for="CustomerEmail">Email Adresse</label>
            <input type="email" asp-for="CustomerEmail" class="form-control" id="rentOrderEmail" placeholder="Indtast Email" />
            <div class="col">
                <span  class="text-danger" asp-validation-for="CustomerEmail"></span>
            </div>
        </div>

        <!-- Phone -->
        <div class="form-group">
            <label asp-for="CustomerPhone">Telefonnummer</label>
            <input type="number" asp-for="CustomerPhone" class="form-control" id="rentOrderEmail" placeholder="Indtast TLF/Mobil" />
            <div class="col">
                <span  class="text-danger" asp-validation-for="CustomerPhone"></span>
            </div>
        </div>

        <br />

        <!-- Surfboards Amount -->
        <div class="form-group">
            <label asp-for="SurfboardAmount">Antal Surfboards</label>
            <select asp-for="SurfboardAmount" class="form-control" id="rentOrderAntalSurfboard">
                <option>1</option>
                <option>2</option>
                <option>3</option>
                <option>4</option>
                <option>5</option>
            </select>
        </div>

        <br />

        <!-- Surfboards Price -->
        <div class="form-group">
            <label asp-for="Price">Lejeperiode og Pris</label>
            <select asp-for="Price" class="form-control" id="rentperiodchooser">
                <option value="">Vælg en lejeperiode</option>
                <option value="1">1 Time 299 kr.</option>
                <option value="3">3 Timer 599 kr.</option>
                <option value="24">1 dag 799 kr.</option>
                <option value="72">3 dage 999 kr.</option>
                <option value="168">7 dage 1299 kr.</option>
            </select>
        </div>

        <br />

        <!-- Rental Period / DateTime Picker(s) -- Start/Pickup & End/Return -->
        <div class="row">

            <div class="form-group">
                <!-- Seems we can access parts of a Date-property from our model, neat O: -->
                <label class="control-label" @* asp-for="RentPeriod.Date" *@ id="startTimeLabel">Dato for Udlejning</label>
                <input class="form-control" @* asp-for="RentPeriod.Date" *@ id="startTimeDatePicker" placeholder="MM/DD/YYYY" type="date" style="max-width: 200px" />

                <!-- Start time chooser dropdown -->
                <label id="startTidspunktLabel">@* Start Tidspunkt *@</label>
                <select class="form-control" @* asp-for="RentPeriod.TimeOfDay" *@ id="startTimeDropdown" style="max-width: 150px;">
                    <option value="08:00">08:00</option>
                    <option value="08:30">08:30</option>
                    <option value="09:00">09:00</option>
                    <option value="09:30">09:30</option>
                    <option value="10:00">10:00</option>
                    <option value="10:30">10:30</option>
                    <option value="11:00">11:00</option>
                    <option value="11:30">11:30</option>
                    <option value="12:00">12:00</option>
                    <option value="12:30">12:30</option>
                    <option value="13:00">13:00</option>
                    <option value="13:30">13:30</option>
                    <option value="14:00">14:00</option>
                    <option value="14:30">14:30</option>
                    <option value="15:00">15:00</option>
                    <option value="15:30">15:30</option>
                    <option value="16:00">16:00</option>
                    <option value="16:30">16:30</option>
                    <option value="17:00">17:00</option>
                </select>

                <!-- Hidden, to send the calculated return date forward when we submit our form & proceed to BookingConfirmation -->
                <label>Date 2</label>
                <input type="datetime.local" asp-for="RentReturn" id="endDateThingy" />

                <input type="hidden" asp-for="RentPeriod" id="hiddenRentPeriod" />

            </div>

            <br />

        </div>

        <!-- The debug helper label, for testing if correct time is calculated by the javascript function 'addHoursToDate' -->
        <div class="form-group">
            <p id="endTimeParagraph">SLUT TID</p>
        </div>
        
        <!-- Amount of wetsuits ; Note: When changed, updates visibility of size-choosing below it -->


        <!-- Remarks -->
        <div class="form-group">
            <label asp-for="Remarks">Bemærkninger</label>
            <textarea asp-for="Remarks" class="form-control" rows="3"></textarea>
        </div>

        <div class="form-group">
            <button class="btn btn-primary" type="submit">Færdiggør Booking</button>
        </div>
    </form>

</div>

<script>
    // Simply here for testing, whether linked scripts work
    // Also a quick easy thing to test with ; recommend keeping it, so we don't have to rewrite anything in the future
    function TestFunction() {
        document.write("Nothing (Test)");
    }
    // ^ Note: Javascritp has 'ASI' (Automatic Semicolon Insertion, yes it's actually a thing), which automatically adds semicolons where needed
    // A function needs them in specific cases, but it's generally best practice to include them, to avoid unexpected errors

    // EventListener functionality which ties display of various elements to rentperiodchooser's current selection
    document.addEventListener("DOMContentLoaded", function () {
            // The elements on the page we need to do something to or get something from
            var rentperiodchooser = document.getElementById("rentperiodchooser");

            var startTimeLabel = document.getElementById("startTimeLabel");
            var startTimeDatePicker = document.getElementById("startTimeDatePicker");

            var startTidspunktLabel = document.getElementById("startTidspunktLabel");
            var startTimeDropdown = document.getElementById("startTimeDropdown");

            var endTimeParagraph = document.getElementById("endTimeParagraph");

            // Function to update visibility based on dropdown value
            function updateVisibility() {
                if (rentperiodchooser.value == 0) {
                    startTimeLabel.style.visibility = "hidden";
                    startTimeDatePicker.style.visibility = "hidden";
                    startTidspunktLabel.style.visibility = "hidden";
                    startTimeDropdown.style.visibility = "hidden";
                    endTimeParagraph.style.visibility = "hidden";
                } else {
                    startTimeLabel.style.visibility = "visible";
                    startTimeDatePicker.style.visibility = "visible";
                    startTidspunktLabel.style.visibility = "visible";
                    startTimeDropdown.style.visibility = "visible";
                    endTimeParagraph.style.visibility = "visible";
                }
            }

            // Initial check when the page loads
            updateVisibility();

            // Add an event listener to check when the dropdown value changes
            rentperiodchooser.addEventListener("change", updateVisibility);
        });

    // Function which runs when the entire document has loaded, to add eventlistener to the first datepicker
    document.addEventListener("DOMContentLoaded", function () {
        
    });

    // Function which takes an element id and tries to set its date to today's date
    // It's aimed at a input-element of type="date")
    // Used by the on-page-load listeners below, for both date pickers
    function setDateElementToToday(elementId) {
        // Get the current date
        var today = new Date();

        // Format the date to 'YYYY-MM-DD'
        var year = today.getFullYear();
        var month = String(today.getMonth() + 1).padStart(2, '0'); // getMonth() returns 0-11, so add 1
        var day = String(today.getDate()).padStart(2, '0');

        // Combine year, month, and day into the format required by input type="date"
        var formattedDate = year + '-' + month + '-' + day;

        // Get the date input element by its ID
        var dateInputElement = document.getElementById(elementId);

        // Set the value of the date picker (input type="date") if the element exists
        if (dateInputElement) {
            dateInputElement.value = formattedDate;
        }
    }

    // Add Event Listeners for multiple things, when page has fully loaded and is ready
    document.addEventListener("DOMContentLoaded", function () {
        // Add Event Listener for : on page full load, setting start datepicker to today
        setDateElementToToday("startTimeDatePicker");
        // Add Event Listener for : on page full load, setting end datepicker to today
        setDateElementToToday("endDateThingy");

        // Add Event Listener for : auto-setting end date to rentperiod's length ahead of start datepicker, when start datepicker's value changes
        //setDateAhead("startTimeDatePicker", "endDateThingy", 0, 1, 00); // Sets target to 3 days, 5 hours, and 30 minutes ahead

        // Add Event Listener for : When rentperiodchooser changes, update the end/return time displayed
        var rentPeriodChooser = document.getElementById("rentperiodchooser");
        rentPeriodChooser.addEventListener("change", function () {
            addHoursToDate("startTimeDatePicker", "startTimeDropdown", rentperiodchooser.value);
        });

        // Add Event Listener for : Calling calculateDate() when datePicker's input is changed
        var datePicker = document.getElementById("startTimeDatePicker");
        datePicker.addEventListener("input", function () {
            //setDateAhead(); // Call the calculateDate function when the date is changed
            addHoursToDate("startTimeDatePicker", "startTimeDropdown", rentperiodchooser.value);
        });

        // Add Event Listener for : Changing start timechooser, to update end/return time
        var timeDropdown = document.getElementById("startTimeDropdown");
        timeDropdown.addEventListener("change", function () {
            addHoursToDate("startTimeDatePicker", "startTimeDropdown", rentperiodchooser.value);
        });

        // Add Event Listener for : When startTimeDatePicker's value changes, the model's RentPeriod is updated (to date from starttimedatepicker & time from starttimedropdown)
        var timeDropdown = document.getElementById("startTimeDatePicker");
        timeDropdown.addEventListener("change", function () {
            updateRentPeriod();
        });

        // Add Event Listener for : When startTimeDropdown's value changes, the model's RentPeriod is updated (to date from starttimedatepicker & time from starttimedropdown)
        var timeDropdown = document.getElementById("startTimeDropdown");
        timeDropdown.addEventListener("change", function () {
            updateRentPeriod();
        });
    });

    // This function does the following:
    // > Updates the 'endDateThingy' element (which contains the DateTime we pass forward when submitting the form)
    // > Updates the 'endTimeParagraph' element, which we can use for debugging
    // > Also writes the result of its calculation out into the console, we can use to debug in our browser
    function addHoursToDate() {
        // Get the date from the start date picker (input type="date")
        const startDateValue = document.getElementById("startTimeDatePicker").value; // Updated ID
        if (!startDateValue) {
            console.error("Please select a start date");
            return;
        }

        // Get the time from the dropdown element (value in "08:30" format)
        const timeValue = document.getElementById("startTimeDropdown").value; // Updated ID
        if (!timeValue) {
            console.error("Please select a time");
            return;
        }

        // Get the number of hours to add from the rent period chooser
        const hoursToAdd = parseInt(document.getElementById("rentperiodchooser").value, 10); // Updated ID
        if (isNaN(hoursToAdd)) {
            console.error("Please enter a valid number of hours");
            return;
        }

        // Parse the start date value (YYYY-MM-DD format)
        const [year, month, day] = startDateValue.split("-").map(Number);

        // Parse the time value (HH:MM format)
        const [inputHours, inputMinutes] = timeValue.split(":").map(Number);

        // Create a new Date object combining the date and time using UTC to avoid time zone issues
        const startDateTime = new Date(Date.UTC(year, month - 1, day, inputHours, inputMinutes));

        // Manually add the specified number of hours
        const millisecondsToAdd = hoursToAdd * 60 * 60 * 1000; // Convert hours to milliseconds
        let newDateTime = new Date(startDateTime.getTime() + millisecondsToAdd);

        // Log newDateTime for debugging
        console.log("Calculated New Date and Time:", newDateTime);

        // Check if newDateTime is between 16:30 and 08:00 the next day
        const clampedStartTime = new Date(newDateTime);
        clampedStartTime.setUTCHours(16, 30, 0, 0); // Set to 16:30 UTC today
        const clampedEndTime = new Date(clampedStartTime);
        clampedEndTime.setUTCDate(clampedEndTime.getUTCDate() + 1); // Next day
        clampedEndTime.setUTCHours(8, 0, 0, 0); // Set to 08:00 UTC the next day

        // Clamping logic
        if (newDateTime >= clampedStartTime && newDateTime < clampedEndTime) {
            // If in the range, set to 08:00 UTC the next day
            newDateTime = new Date(clampedEndTime);
        }

        // Check if newDateTime is valid
        if (isNaN(newDateTime.getTime())) {
            console.error("Calculated date is invalid");
            return;
        }

        // Set the inner HTML with only hours and minutes
        document.getElementById("endTimeParagraph").innerHTML =
            newDateTime.toISOString().split("T")[0] + " " +
            newDateTime.getUTCHours().toString().padStart(2, '0') + ":" +
            newDateTime.getUTCMinutes().toString().padStart(2, '0');

        // Set the value for datetime-local input
        document.getElementById("endDateThingy").value = newDateTime.toISOString().slice(0, 16); // For <input type="datetime-local">

        console.log("New Date and Time for endDateThingy:", newDateTime.toISOString().slice(0, 16)); // Debugging
        return newDateTime;
    }

    function updateRentPeriod() {
        // Get the date from the start date picker (input type="date")
        const startDateValue = document.getElementById("startTimeDatePicker").value;
        if (!startDateValue) {
            console.error("Please select a start date");
            return;
        }

        // Get the time from the dropdown element (value in "08:30" format)
        const timeValue = document.getElementById("startTimeDropdown").value; 
        if (!timeValue) {
            console.error("Please select a time");
            return;
        }

        // Parse the start date value (YYYY-MM-DD format)
        const [year, month, day] = startDateValue.split("-").map(Number);

        // Parse the time value (HH:MM format)
        const [inputHours, inputMinutes] = timeValue.split(":").map(Number);

        // Create a new Date object combining the date and time
        const rentPeriodDateTime = new Date(Date.UTC(year, month - 1, day, inputHours, inputMinutes));

        // Set the value of the hidden input element
        document.getElementById("hiddenRentPeriod").value = rentPeriodDateTime.toISOString(); // Update your hidden input

        console.log("Updated hidden input RentPeriod:", rentPeriodDateTime.toISOString());
    }
</script>