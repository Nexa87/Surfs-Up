﻿@using SurfsUpv3.Models;
@model Booking


<div class="container">
    <h3>Booking Oversigt</h3>
    
    <br/>

    <p>Du har valgt at leje : @Model.SelectedSurfboard</p>
    <p>For at fuldføre din ordre bedes du taste dine informationer:</p>


    <form method="post" asp-controller="BookingConfirmation" asp-action="ValidationTest">

        <div class="text-danger" asp-validation-summary="None"></div> <!-- If we use asp-validation-summary="All", ALL our error messages are summarized here -->

        <!-- We need this so we don't lose the SelectedSurfboard if we come back here due to mistakenly not having filled all fields -->
        <input type="hidden" asp-for="SelectedSurfboard" />

        <!-- Name -->
        <div class="form-group">
            <label asp-for="CustomerName">Fuldt Navn</label>
            <input type="text" asp-for="CustomerName" class="form-control" id="rentOrderFullName" placeholder="Indtast navn"/>

            <!-- This is an additional error indicator, that'll show "This X field is required" -->
            <div class="col">
                <span  class="text-danger" asp-validation-for="CustomerName"></span>
            </div>
        </div>

        <!-- E-mail -->
        <div class="form-group">
            <label asp-for="CustomerEmail">Email Adresse</label>
            <input type="email" asp-for="CustomerEmail" class="form-control" id="rentOrderEmail" placeholder="Indtast Email" />
            <div class="col">
                <span  class="text-danger" asp-validation-for="CustomerEmail"></span>
            </div>
        </div>

        <!-- Phone -->
        <div class="form-group">
            <label asp-for="CustomerPhone">Telefonnummer</label>
            <input type="number" asp-for="CustomerPhone" class="form-control" id="rentOrderEmail" placeholder="Indtast TLF/Mobil" />
            <div class="col">
                <span  class="text-danger" asp-validation-for="CustomerPhone"></span>
            </div>
        </div>

        <br />

        <!-- Surfboards Amount -->
        <div class="form-group">
            <label asp-for="SurfboardAmount">Antal Surfboards</label>
            <select asp-for="SurfboardAmount" class="form-control" id="rentOrderAntalSurfboard">
                <option>1</option>
                <option>2</option>
                <option>3</option>
                <option>4</option>
                <option>5</option>
            </select>
        </div>

        <br />

        <!-- Surfboards Price -->
        <div class="form-group">
            <label asp-for="Price">Lejeperiode og Pris</label>
            <select asp-for="Price" class="form-control" id="rentperiodchooser">
                <option value="">Vælg en lejeperiode</option>
                <option value="1">1 Time 299 kr.</option>
                <option value="3">3 Timer 599 kr.</option>
                <option value="24">1 dag 799 kr.</option>
                <option value="72">3 dage 999 kr.</option>
                <option value="168">7 dage 1299 kr.</option>
            </select>
        </div>

        <br />

        <!-- Rental Period / DateTime Picker(s) -- Start/Pickup & End/Return -->
        <div class="row">

            <div class="form-group">
                <!-- Seems we can access parts of a Date-property from our model, neat O: -->
                <label class="control-label" asp-for="RentPeriod.Date" id="startTimeLabel">Dato for Udlejning</label>
                <input class="form-control" asp-for="RentPeriod.Date" id="startTimeDatePicker" placeholder="MM/DD/YYYY" type="date" style="max-width: 200px" />

                <!-- Start time chooser dropdown -->
                <label id="startTidspunktLabel">@* Start Tidspunkt *@</label>
                <select class="form-control" id="startTimeDropdown" style="max-width: 150px;">
                    <option value="08:00">08:00</option>
                    <option value="08:30">08:30</option>
                    <option value="09:00">09:00</option>
                    <option value="09:30">09:30</option>
                    <option value="10:00">10:00</option>
                    <option value="10:30">10:30</option>
                    <option value="11:00">11:00</option>
                    <option value="11:30">11:30</option>
                    <option value="12:00">12:00</option>
                    <option value="12:30">12:30</option>
                    <option value="13:00">13:00</option>
                    <option value="13:30">13:30</option>
                    <option value="14:00">14:00</option>
                    <option value="14:30">14:30</option>
                    <option value="15:00">15:00</option>
                    <option value="15:30">15:30</option>
                    <option value="16:00">16:00</option>
                    <option value="16:30">16:30</option>
                    <option value="17:00">17:00</option>
                </select>

                <!-- Hidden  -->
                <label>Date 2</label>
                <input type="date" id="endDateThingy" />

            </div>

            <br />

        </div>

        <div class="form-group">
            <p id="endTimeParagraph">SLUT TID</p>
        </div>
        
        <!-- Amount of wetsuits ; Note: When changed, updates visibility of size-choosing below it -->


        <!-- Remarks -->
        <div class="form-group">
            <label asp-for="Remarks">Bemærkninger</label>
            <textarea asp-for="Remarks" class="form-control" rows="3"></textarea>
        </div>

        <div class="form-group">
            <button class="btn btn-primary" type="submit">Færdiggør Booking</button>
        </div>
    </form>

</div>

<script>
    // Simply here for testing, whether linked scripts work
    function TestFunction() {
        document.write("Nothing (Test)");
    }

    // When the page has loaded, we want to set our datepicker's default dates
    document.addEventListener("DOMContentLoaded", function () {
        var datePicker = document.getElementById("startTimeDatePicker");
            
        // Get today's date
        var today = new Date();
            
        // Format the date to YYYY-MM-DD (required format for input[type="date"])
        var day = String(today.getDate()).padStart(2, '0');
        var month = String(today.getMonth() + 1).padStart(2, '0'); // Months are zero-indexed
        var year = today.getFullYear();

        // Set the value of the date picker to today's date
        datePicker.value = `${year}-${month}-${day}`;
    });

    // EventListener functionality which ties display of Start DatePicker to rentperiodchooser's current selection
    document.addEventListener("DOMContentLoaded", function () {
            // The elements on the page we need to do something to or get something from
            var rentperiodchooser = document.getElementById("rentperiodchooser");

            var startTimeLabel = document.getElementById("startTimeLabel");
            var startTimeDatePicker = document.getElementById("startTimeDatePicker");

            var startTidspunktLabel = document.getElementById("startTidspunktLabel");
            var startTimeDropdown = document.getElementById("startTimeDropdown");

            var endTimeParagraph = document.getElementById("endTimeParagraph");

            // Function to update visibility based on dropdown value
            function updateVisibility() {
                if (rentperiodchooser.value == 0) {
                    startTimeLabel.style.visibility = "hidden";
                    startTimeDatePicker.style.visibility = "hidden";
                    startTidspunktLabel.style.visibility = "hidden";
                    startTimeDropdown.style.visibility = "hidden";
                    endTimeParagraph.style.visibility = "hidden";
                } else {
                    startTimeLabel.style.visibility = "visible";
                    startTimeDatePicker.style.visibility = "visible";
                    startTidspunktLabel.style.visibility = "visible";
                    startTimeDropdown.style.visibility = "visible";
                    endTimeParagraph.style.visibility = "visible";
                }
            }

            // Initial check when the page loads
            updateVisibility();

            // Add an event listener to check when the dropdown value changes
            rentperiodchooser.addEventListener("change", updateVisibility);
        });

    // Function which runs when the entire document has loaded, to add eventlistener to the first datepicker
    document.addEventListener("DOMContentLoaded", function () {
        var datePicker = document.getElementById("startDate");

        // Add an event listener that listens for changes to the date input field
        datePicker.addEventListener("input", function () {
            calculateDate(); // Call the calculateDate function when the date is changed
        });
    });

    // Function to update the second date picker
    function calculateDate() {
        // Get the input values
        const startDateInput = document.getElementById("startDate").value;
        const hoursAhead = parseInt(document.getElementById("hoursAhead").value);

        // Check if both inputs are valid
        if (!startDateInput || isNaN(hoursAhead)) {
            alert("Please enter both a valid start date and number of hours ahead.");
            return;
        }

        // Convert the start date to a JavaScript Date object
        const startDate = new Date(startDateInput);

        // Add the hours to the start date (hours * 60 minutes * 60 seconds * 1000 milliseconds)
        const futureDate = new Date(startDate.getTime() + (hoursAhead * 60 * 60 * 1000));

        // Format the future date in 'YYYY-MM-DD' format
        const formattedDate = futureDate.toISOString().split('T')[0];

        // Set the value of the future date input
        document.getElementById("endDateThingy").value = formattedDate;
    }

    
    function setDateToToday() {
        // Get the current date
        var today = new Date();

        // Format the date to 'YYYY-MM-DD'
        var year = today.getFullYear();
        var month = String(today.getMonth() + 1).padStart(2, '0'); // getMonth() returns 0-11, so we add 1
        var day = String(today.getDate()).padStart(2, '0');

        // Combine year, month, and day into the format required by input type="date"
        var formattedDate = year + '-' + month + '-' + day;

        // Set the value of the date picker (input type="date")
        document.getElementById("startDate").value = formattedDate;
    }

    // Function which takes an element id and tries to set its date to today's date (e.g. aimed at a input-element of type="date")
    function setDateToTodayOnLoad(elementId) {
        // Get the current date
        var today = new Date();

        // Format the date to 'YYYY-MM-DD'
        var year = today.getFullYear();
        var month = String(today.getMonth() + 1).padStart(2, '0'); // getMonth() returns 0-11, so add 1
        var day = String(today.getDate()).padStart(2, '0');

        // Combine year, month, and day into the format required by input type="date"
        var formattedDate = year + '-' + month + '-' + day;

        // Get the date input element by its ID
        var dateInputElement = document.getElementById(elementId);

        // Set the value of the date picker (input type="date") if the element exists
        if (dateInputElement) {
            dateInputElement.value = formattedDate;
        }
    }

    // Automatically call the function when the page loads
    document.addEventListener("DOMContentLoaded", function () {
        setDateToTodayOnLoad("startDate"); // Update the startdatepicker
        setDateToTodayOnLoad("endDateThingy"); // Update the intended-hidden enddatepicker
    });

    // Sets the end date picker to X time ahead of the start date picker (i.e. this is for the 'return date' calculation)
    function setDateAhead(sourceId, targetId, days, hours, minutes) {
        // Get the source date input element by ID
        var sourceDateInput = document.getElementById(sourceId);
        var targetDateInput = document.getElementById(targetId);

        // Check if both elements exist
        if (sourceDateInput && targetDateInput) {
            // Get the value from the source date input
            var sourceDate = new Date(sourceDateInput.value);

            // Check if the source date is valid
            if (!isNaN(sourceDate.getTime())) {
                // Calculate the new date
                sourceDate.setDate(sourceDate.getDate() + days); // Add days
                sourceDate.setHours(sourceDate.getHours() + hours); // Add hours
                sourceDate.setMinutes(sourceDate.getMinutes() + minutes); // Add minutes

                // Format the date to 'YYYY-MM-DD' for the target input
                var year = sourceDate.getFullYear();
                var month = String(sourceDate.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed
                var day = String(sourceDate.getDate()).padStart(2, '0');

                // Set the value of the target date input
                targetDateInput.value = `${year}-${month}-${day}`;
            } else {
                console.error("Invalid source date.");
            }
        } else {
            console.error("Source or target date input not found.");
        }
    }

    // Example usage when the page loads
    document.addEventListener("DOMContentLoaded", function () {
        // Get the chosen rent period times


        // 
        setDateAhead("startDate", "endDateThingy", 3, 5, 30); // Sets target to 3 days, 5 hours, and 30 minutes ahead
    });
</script>